{
  "name": "twit",
  "description": "Twitter API client for node (REST & Streaming)",
  "version": "1.0.0",
  "author": {
    "name": "Tolga Tezel"
  },
  "keywords": [
    "twitter",
    "rest",
    "stream",
    "oauth"
  ],
  "dependencies": {
    "oauth": ">=0.9.0"
  },
  "devDependencies": {
    "should": ">=0.4.2",
    "mocha": ">=0.8.1",
    "colors": ">=0.6.0"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./lib/twitter",
  "repository": {
    "type": "git",
    "url": "http://github.com/ttezel/twit.git"
  },
  "scripts": {
    "test": "mocha tests/* -t 30000 -R spec"
  },
  "readme": "#twit\n\nTwitter API Client for node\n\nSupports both the **REST** and **Streaming** API.\n\n#Installing\n\n```\nnpm install twit\n\n```\n\n##Usage:\n\n```javascript\nvar Twit = require('twit')\n\nvar T = new Twit({\n    consumer_key:         '...'\n  , consumer_secret:      '...'\n  , access_token:         '...'\n  , access_token_secret:  '...'\n})\n\n//\n//  tweet 'hello world!'\n//\nT.post('statuses/update', { status: 'hello world!' }, function(err, reply) {\n  //  ...\n})\n      \n//\n//  search twitter for all tweets containing the word 'banana' since Nov. 11, 2011\n//\nT.get('search/tweets', { q: 'banana', since: '2011-11-11' }, function(err, reply) {\n  //  ...\n})\n\n//\n//  stream a sample of public statuses\n//\nvar stream = T.stream('statuses/sample')\n\nstream.on('tweet', function (tweet) {\n  console.log(tweet)\n})\n      \n//\n//  filter the twitter public stream by the word 'mango'. \n//\nvar stream = T.stream('statuses/filter', { track: 'mango' })\n\nstream.on('tweet', function (tweet) {\n  console.log(tweet)\n})\n\n```\n\n# twit API:\n\nJust 3 methods. They cover the full twitter API.\n\n* `T.get(path, [params], callback)`         GET any of the REST API Endpoints.\n* `T.post(path, [params], callback)`        POST any of the REST API Endpoints.\n* `T.stream(path, [params])`                Use this with the Streaming API.\n\nNote: Omit the `.json` from `path` (i.e. use `'statuses/sample'` instead of `'statuses/sample.json'`).\n\n# Using the Streaming API\n\n`T.stream()` keeps the connection alive, and returns an `EventEmitter`, which emits the following events:\n\n* `tweet`            status (tweet)\n* `delete`           status (tweet) deletion message\n* `limit`            limitation message \n* `scrub_geo`        location deletion message\n* `disconnect`       disconnect message from twitter. If this occurs, `Twit` will close the connection and emit `disconnect` with the message details received from twitter.\n\nIf you want to stop the stream, use `stream.stop()`\n\nTo restart the stream, use `stream.start()`.\n\n###path\n\n\n* If `path` is `'user'`, the User stream of the authenticated user will be streamed.\n* If `path` is `'site'`, the Site stream of the authenticated application will be streamed.\n* If `path` is anything other than `'user'` or `'site'`, the Public stream will be streamed.\n\n#What do I have access to?\n\nAnything in the Twitter API:\n\n* REST API Endpoints:       https://dev.twitter.com/docs/api\n* Public stream endpoints:  https://dev.twitter.com/docs/streaming-api/methods\n* User stream endpoints:    https://dev.twitter.com/docs/streaming-api/user-streams\n* Site stream endpoints:    https://dev.twitter.com/docs/streaming-api/site-streams\n\n-------\n\nGo here to create an app and get OAuth credentials (if you haven't already): https://dev.twitter.com/apps/new\n\n\n#How do I run the tests?\n\nClone the repo\n\n```\ngit clone git@github.com:ttezel/twit.git\n```\n\nInstall the dev dependencies ([mocha](https://github.com/visionmedia/mocha)\n\n```\nnpm install mocha -g\n```\n\nNote: When the `-g` flag is invoked, the package will be installed globally. In order to use `mocha` from the command line, you must use the `-g` flag. This is necessary to run the tests with `npm test`.\n\nCreate a `config.js` file in the root of the cloned repo. It should export the oauth credentials. It should look something like this:\n\n```\nmodule.exports = {\n    consumer_key: '...'\n  , consumer_secret: '...'\n  , access_token: '...'\n  , access_token_secret: '...'\n}\n```\n\nThen run the tests:\n\n```\nnpm test\n```\n\nYou can also run the example:\n\n```\nnode examples/rtd2.js\n```\n\n![iRTD2](http://dl.dropbox.com/u/32773572/RTD2_logo.png)\n\nThe example is a twitter bot named [RTD2](https://twitter.com/#!/iRTD2) written using `twit`. RTD2 tweets about **github** and curates its social graph.\n\n-------\n\n## License \n\n(The MIT License)\n\nCopyright (c) by Tolga Tezel <tolgatezel11@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n## Changelog\n\n###1.0.0\n  * now to stop and start the stream, use `stream.stop()` and `stream.start()` instead of emitting the `start` and `stop` events\n  * If twitter sends a `disconnect` message, closes the stream and emits `disconnect` with the disconnect message received from twitter\n\n###0.2.0\n  * Updated `twit` for usage with v1.1 of the Twitter API.\n\n###0.1.5\n\n  * **BREAKING CHANGE** to `twit.stream()`. Does not take a callback anymore. It returns \n    immediately with the `EventEmitter` that you can listen on. The `Usage` section in \n    the Readme.md has been updated. Read it.\n\n\n###0.1.4\n\n  * `twit.stream()` has signature `function (path, params, callback)`",
  "readmeFilename": "README.md",
  "_id": "twit@1.0.0",
  "_from": "twit@1.0.0"
}
